/*
Copyright 2020 Henk Punt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

function map(l, f) {

    let _map = (acc, rst)  => {
        if(rst) {
            recurs (conj(acc,  f(first(rst))), next(rst))
        }
        else {
            return acc
        }
    }

    return _map([], l)
}

function reduce(acc, l, f) {
    if(l) {
        recurs (f(acc, first(l)), next(l), f)
    }
    else {
        return acc
    }
}

function foreach(l, f) {
    if(l) {
        f(first(l))
        recurs (next(l), f)
    }
    else {}
}

function times(n, f) {
    if(n == 0) {
        return n
    }
    else {
        f(n - 1)
        recurs (n - 1, f)
    }
}

function second(l) {
    return get(l, 1)
}

function third(l) {
    return get(l, 2)
}

function merge(m1, m2)
{
    return reduce(m1, iterator(m2), (acc, i) => {
        return assoc(acc, i, get(m2, i))
    })
}

function runpar(n, fn) {
    /* TODO no need to pass ch and fn, if compiler is fixed to allow ref to outer outer lexical scope */
    let fork_ = (ch, fn, n) => {
        if (n == 0) {
            return n
        }
        else {
            spawn(() => {
               send(ch, fn())
            })
            recurs (ch, fn, n - 1)
        }
    }
  
    let join_ = (ch, fn, n) => {
        if(n == 0) {
          return n
        }
        else {
          recv(ch)
          recurs (ch, fn, n - 1)
        }
    }
  
    let ch = channel()
  
    fork_(ch, fn, n) 
    join_(ch, fn, n)
}

function swap(a, f) {
    let oldval = deref(a)
    let newval = f(oldval)
    if(compare_and_set(a, oldval, newval)) {
        return newval
    }
    else {
        sleep(0)
        recurs (a, f)
    }
}

function makeset(lst) {
    return reduce({}, lst, (acc, item) => {
        return assoc(acc, item, true)
    })
}

function main() {}